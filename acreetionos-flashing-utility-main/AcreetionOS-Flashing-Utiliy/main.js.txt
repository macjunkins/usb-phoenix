const { app, BrowserWindow, ipcMain, dialog, shell } = require('electron');
const path = require('path');
const https = require('https');
const http = require('http');
const cheerio = require('cheerio');
const fs = require('fs');
const { exec, spawn } = require('child_process');
const os = require('os');

let mainWindow;

function createWindow() {
  mainWindow = new BrowserWindow({
    width: 650,
    height: 700,
    title: "AcreetionOS USB Flashing Utility",
    icon: path.join(__dirname, 'assets/icon.png'), // Add an icon if you have one
    webPreferences: {
      nodeIntegration: true,
      contextIsolation: false,
      enableRemoteModule: false
    },
    show: false // Don't show until ready
  });

  mainWindow.loadFile('index.html');
  
  // Show window when ready to prevent visual flash
  mainWindow.once('ready-to-show', () => {
    mainWindow.show();
  });

  // Handle window closed
  mainWindow.on('closed', () => {
    mainWindow = null;
  });
}

// Helper function to make HTTP/HTTPS requests with better error handling
function makeRequest(url, timeout = 15000) {
  return new Promise((resolve, reject) => {
    const protocol = url.startsWith('https:') ? https : http;
    
    const req = protocol.get(url, (res) => {
      let data = '';
      
      // Handle redirects (up to 5 redirects)
      if (res.statusCode >= 300 && res.statusCode < 400 && res.headers.location) {
        req.destroy();
        return makeRequest(res.headers.location, timeout).then(resolve).catch(reject);
      }
      
      if (res.statusCode !== 200) {
        req.destroy();
        return reject(new Error(`HTTP ${res.statusCode}: ${res.statusMessage}`));
      }
      
      res.setEncoding('utf8');
      res.on('data', chunk => data += chunk);
      res.on('end', () => resolve(data));
      res.on('error', reject);
    });
    
    req.on('error', reject);
    req.setTimeout(timeout, () => {
      req.destroy();
      reject(new Error(`Request timeout (${timeout}ms)`));
    });
  });
}

// Helper function to download a file with progress
function downloadFile(url, savePath, onProgress) {
  return new Promise((resolve, reject) => {
    const protocol = url.startsWith('https:') ? https : http;
    const writer = fs.createWriteStream(savePath);
    
    const req = protocol.get(url, (res) => {
      // Handle redirects
      if (res.statusCode >= 300 && res.statusCode < 400 && res.headers.location) {
        writer.destroy();
        fs.unlink(savePath, () => {}); // Clean up partial file
        return downloadFile(res.headers.location, savePath, onProgress).then(resolve).catch(reject);
      }
      
      if (res.statusCode !== 200) {
        writer.destroy();
        fs.unlink(savePath, () => {});
        return reject(new Error(`Download failed: HTTP ${res.statusCode}`));
      }
      
      const totalSize = parseInt(res.headers['content-length'], 10);
      let downloadedSize = 0;
      
      res.on('data', (chunk) => {
        downloadedSize += chunk.length;
        writer.write(chunk);
        
        if (totalSize > 0 && onProgress) {
          const progress = Math.round((downloadedSize / totalSize) * 100);
          onProgress(progress);
        }
      });
      
      res.on('end', () => {
        writer.end();
        resolve(savePath);
      });
      
      res.on('error', (err) => {
        writer.destroy();
        fs.unlink(savePath, () => {});
        reject(err);
      });
    });
    
    req.on('error', (err) => {
      writer.destroy();
      fs.unlink(savePath, () => {});
      reject(err);
    });
    
    writer.on('error', (err) => {
      req.destroy();
      fs.unlink(savePath, () => {});
      reject(err);
    });
  });
}

// Get ISO download links from AcreetionOS website
async function getISOLinks() {
  try {
    console.log('Fetching ISO links...');
    
    // Replace with the actual AcreetionOS download page URL
    const downloadPageUrl = 'https://acreetionos.org/downloads'; // Update this URL
    
    // For now, return mock data since we don't have the actual website
    // In production, uncomment the web scraping code below
    
    return [
      {
        label: 'AcreetionOS 2024.1 (Latest)',
        url: 'https://example.com/acreetionos-2024.1.iso'
      },
      {
        label: 'AcreetionOS 2023.12 (Stable)',
        url: 'https://example.com/acreetionos-2023.12.iso'
      }
    ];
    
    // Uncomment and modify this section when you have the actual download page:
    /*
    const html = await makeRequest(downloadPageUrl);
    const $ = cheerio.load(html);
    const links = [];
    
    // Adjust selectors based on the actual website structure
    $('a[href$=".iso"]').each((i, elem) => {
      const $elem = $(elem);
      const href = $elem.attr('href');
      const text = $elem.text().trim();
      
      if (href && text) {
        links.push({
          label: text,
          url: href.startsWith('http') ? href : downloadPageUrl + href
        });
      }
    });
    
    return links;
    */
    
  } catch (error) {
    console.error('Error fetching ISO links:', error);
    return [{
      label: 'Error loading ISOs - Check your internet connection',
      url: ''
    }];
  }
}

// Get USB devices based on the operating system
async function getUSBDevices() {
  return new Promise((resolve) => {
    const platform = os.platform();
    let command;
    
    if (platform === 'linux') {
      command = 'lsblk -d -o NAME,SIZE,MODEL,TYPE | grep disk';
    } else if (platform === 'darwin') { // macOS
      command = 'diskutil list | grep external';
    } else if (platform === 'win32') { // Windows
      command = 'wmic logicaldisk where drivetype=2 get deviceid,size,volumename';
    } else {
      resolve([]);
      return;
    }
    
    exec(command, (error, stdout, stderr) => {
      if (error) {
        console.error('Error getting USB devices:', error);
        resolve([]);
        return;
      }
      
      const devices = [];
      const lines = stdout.split('\n').filter(line => line.trim());
      
      if (platform === 'linux') {
        lines.forEach(line => {
          const parts = line.trim().split(/\s+/);
          if (parts.length >= 2) {
            const name = parts[0];
            const size = parts[1];
            const model = parts.slice(2, -1).join(' ') || 'Unknown Device';
            
            devices.push({
              path: `/dev/${name}`,
              label: `${model} (${name})`,
              size: size
            });
          }
        });
      } else if (platform === 'darwin') {
        // Parse macOS diskutil output
        lines.forEach(line => {
          if (line.includes('external')) {
            const diskMatch = line.match(/\/dev\/(disk\d+)/);
            if (diskMatch) {
              devices.push({
                path: `/dev/${diskMatch[1]}`,
                label: `External Disk (${diskMatch[1]})`,
                size: 'Unknown'
              });
            }
          }
        });
      } else if (platform === 'win32') {
        // Parse Windows WMIC output
        lines.slice(1).forEach(line => { // Skip header
          const parts = line.trim().split(/\s+/);
          if (parts.length >= 2) {
            const deviceId = parts[0];
            const size = parts[1];
            const volumeName = parts.slice(2).join(' ') || 'Removable Disk';
            
            devices.push({
              path: deviceId,
              label: `${volumeName} (${deviceId})`,
              size: `${Math.round(parseInt(size) / (1024 * 1024 * 1024))}GB`
            });
          }
        });
      }
      
      resolve(devices);
    });
  });
}

// Flash ISO to USB device
async function flashISO(isoUrl, usbPath) {
  try {
    // Create temp directory if it doesn't exist
    const tempDir = path.join(os.tmpdir(), 'acreetionos-flasher');
    if (!fs.existsSync(tempDir)) {
      fs.mkdirSync(tempDir, { recursive: true });
    }
    
    // Generate filename from URL
    const urlParts = isoUrl.split('/');
    const filename = urlParts[urlParts.length - 1] || 'download.iso';
    const isoPath = path.join(tempDir, filename);
    
    // Send status update
    mainWindow.webContents.send('flash-status', 'Downloading ISO...');
    
    // Download the ISO file
    await downloadFile(isoUrl, isoPath, (progress) => {
      mainWindow.webContents.send('flash-progress', progress);
      mainWindow.webContents.send('flash-status', `Downloading ISO... ${progress}%`);
    });
    
    mainWindow.webContents.send('flash-status', 'Starting flash process...');
    
    // Flash the ISO to USB using dd (Linux/macOS) or appropriate tool (Windows)
    const platform = os.platform();
    let flashCommand;
    
    if (platform === 'linux' || platform === 'darwin') {
      // Use dd command (requires sudo)
      flashCommand = `pkexec dd if="${isoPath}" of="${usbPath}" bs=4M status=progress oflag=sync`;
    } else if (platform === 'win32') {
      // For Windows, you might want to use a tool like Rufus programmatically
      // or implement a Windows-specific flashing method
      throw new Error('Windows flashing not implemented yet. Please use Rufus or similar tool.');
    } else {
      throw new Error('Unsupported operating system');
    }
    
    return new Promise((resolve, reject) => {
      mainWindow.webContents.send('flash-status', 'Flashing to USB drive...');
      
      const flashProcess = exec(flashCommand, (error, stdout, stderr) => {
        // Clean up downloaded ISO
        fs.unlink(isoPath, () => {});
        
        if (error) {
          console.error('Flash error:', error);
          reject(new Error(`Flash failed: ${error.message}`));
          return;
        }
        
        resolve({ success: true, message: 'Flash completed successfully!' });
      });
      
      // Handle progress for dd command
      flashProcess.stderr.on('data', (data) => {
        const output = data.toString();
        // Parse dd progress output if available
        const progressMatch = output.match(/(\d+)%/);
        if (progressMatch) {
          const progress = parseInt(progressMatch[1]);
          mainWindow.webContents.send('flash-progress', progress);
          mainWindow.webContents.send('flash-status', `Flashing... ${progress}%`);
        }
      });
      
      flashProcess.on('error', (error) => {
        fs.unlink(isoPath, () => {});
        reject(error);
      });
    });
    
  } catch (error) {
    console.error('Flash process error:', error);
    throw error;
  }
}

// IPC handlers
ipcMain.handle('get-iso-links', async () => {
  return await getISOLinks();
});

ipcMain.handle('get-usb-devices', async () => {
  return await getUSBDevices();
});

ipcMain.handle('flash-iso', async (event, { isoUrl, usbPath }) => {
  try {
    return await flashISO(isoUrl, usbPath);
  } catch (error) {
    return { success: false, message: error.message };
  }
});

// App event handlers
app.whenReady().then(() => {
  createWindow();
  
  app.on('activate', () => {
    if (BrowserWindow.getAllWindows().length === 0) {
      createWindow();
    }
  });
});

app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

// Handle app startup
app.on('ready', () => {
  console.log('AcreetionOS USB Flasher started');
});

// Prevent multiple instances
const gotTheLock = app.requestSingleInstanceLock();

if (!gotTheLock) {
  app.quit();
} else {
  app.on('second-instance', () => {
    if (mainWindow) {
      if (mainWindow.isMinimized()) mainWindow.restore();
      mainWindow.focus();
    }
  });
}
